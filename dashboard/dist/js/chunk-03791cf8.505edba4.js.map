{"version":3,"sources":["webpack:///./src/views/Cities/List.vue","webpack:///src/views/Cities/List.vue","webpack:///./src/views/Cities/List.vue?f67b","webpack:///./src/views/Cities/List.vue?489f","webpack:///./src/requests/cities.request.js"],"names":["attrs","model","value","_vm","callback","$set","expression","loading_btn","_c","staticClass","rows","scopedSlots","key","item","on","$$v","selected_rows","delete_dialog","snackbar","staticRenderFns","data","cities","search","loading","text","color","selected_cities","headers","align","sortable","computed","mounted","methods","addCities","requests","r","finally","deleteCities","deleteCitiesList","readCities","catch","selectCities","component","params","axios","post","column","put","list","delete","get","city_id"],"mappings":"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","file":"js/chunk-03791cf8.505edba4.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[(_vm.loading)?_c('v-progress-linear',{attrs:{\"indeterminate\":true}}):_c('v-container',{staticClass:\"my-2\"},[_c('form',{attrs:{\"autocomplete\":\"off\"},on:{\"submit\":function($event){$event.preventDefault();return _vm.addCities.apply(null, arguments)}}},[_c('v-layout',{attrs:{\"row\":\"\",\"wrap\":\"\"}},[_c('v-flex',{attrs:{\"xs12\":\"\",\"lg2\":\"\",\"xl2\":\"\",\"md3\":\"\",\"sm4\":\"\"}},[_c('v-text-field',{staticClass:\"mx-1\",attrs:{\"type\":\"text\",\"label\":_vm.$store.getters.language.data.cities.city_name,\"dense\":\"\",\"filled\":\"\",\"required\":\"\"},model:{value:(_vm.cities.city_name),callback:function ($$v) {_vm.$set(_vm.cities, \"city_name\", $$v)},expression:\"cities.city_name\"}})],1),_c('v-flex',{attrs:{\"xs12\":\"\",\"lg2\":\"\",\"xl2\":\"\",\"md2\":\"\",\"sm4\":\"\"}},[_c('v-btn',{attrs:{\"color\":\"primary\",\"loading\":_vm.loading_btn,\"type\":\"submit\",\"x-large\":\"\"}},[_vm._v(_vm._s(_vm.$store.getters.language.data.cities.add_btn))])],1)],1)],1),_c('v-layout',{attrs:{\"row\":\"\",\"wrap\":\"\",\"mt-5\":\"\"}},[_c('v-flex',{attrs:{\"xs12\":\"\"}},[_c('v-card',[_c('v-card-text',[_c('v-data-table',{staticClass:\"elevation-0\",attrs:{\"headers\":_vm.headers,\"show-select\":\"\",\"search\":_vm.search,\"items\":_vm.rows,\"item-key\":\"city_id\"},scopedSlots:_vm._u([{key:`item.city_id`,fn:function({ item }){return [_c('div',[_c('v-btn',{staticClass:\"mx-1\",attrs:{\"icon\":\"\",\"to\":'/cities-list/'+item.city_id,\"color\":\"teal\"}},[_c('v-icon',[_vm._v(\" mdi-pencil-outline \")])],1),_c('v-btn',{staticClass:\"mx-1\",attrs:{\"color\":\"error\",\"icon\":\"\"},on:{\"click\":function($event){return _vm.selectCities(item)}}},[_c('v-icon',[_vm._v(\" mdi-delete-outline \")])],1)],1)]}}],null,true),model:{value:(_vm.selected_rows),callback:function ($$v) {_vm.selected_rows=$$v},expression:\"selected_rows\"}})],1),(_vm.selected_rows.length > 0)?_c('v-card-actions',[_c('v-btn',{attrs:{\"color\":\"error\"},on:{\"click\":_vm.deleteCitiesList}},[_vm._v(_vm._s(_vm.$store.getters.language.data.cities.delete_list_btn))])],1):_vm._e()],1)],1)],1)],1),_c('v-dialog',{attrs:{\"persistent\":\"\",\"max-width\":\"400\"},model:{value:(_vm.delete_dialog),callback:function ($$v) {_vm.delete_dialog=$$v},expression:\"delete_dialog\"}},[_c('v-card',[_c('v-card-title',[_vm._v(\" \"+_vm._s(_vm.$store.getters.language.data.cities.delete_question)+\" \")]),_c('v-card-actions',[_c('v-spacer'),_c('v-btn',{staticClass:\"elevation-0\",attrs:{\"text\":\"\"},on:{\"click\":function($event){_vm.delete_dialog = false}}},[_vm._v(\" \"+_vm._s(_vm.$store.getters.language.data.cities.cancel_btn)+\" \")]),_c('v-btn',{staticClass:\"elevation-0\",attrs:{\"color\":\"error\"},on:{\"click\":function($event){return _vm.deleteCities(_vm.selected_cities.city_id)}}},[_vm._v(\" \"+_vm._s(_vm.$store.getters.language.data.cities.yes_btn)+\" \")])],1)],1)],1),_c('v-snackbar',{attrs:{\"color\":_vm.snackbar.color},model:{value:(_vm.snackbar.value),callback:function ($$v) {_vm.$set(_vm.snackbar, \"value\", $$v)},expression:\"snackbar.value\"}},[_vm._v(\" \"+_vm._s(_vm.snackbar.text)+\" \")])],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n    <div>\n        <v-progress-linear :indeterminate=\"true\" v-if=\"loading\"></v-progress-linear>\n            <v-container v-else class=\"my-2\">\n                <form @submit.prevent=\"addCities\" autocomplete=\"off\">\n                    <v-layout row wrap>\n        \n                    <v-flex xs12 lg2 xl2 md3 sm4>\n                        <v-text-field v-model=\"cities.city_name\" type=\"text\" :label=\"$store.getters.language.data.cities.city_name\" dense\n                            class=\"mx-1\"  filled required>\n                        </v-text-field>\n                    </v-flex>\n                \n                        <v-flex xs12 lg2 xl2 md2 sm4>\n                            <v-btn  color=\"primary\" :loading=\"loading_btn\" type=\"submit\" x-large>{{$store.getters.language.data.cities.add_btn}}</v-btn>\n                        </v-flex>\n                    </v-layout>\n                </form>\n<v-layout row wrap mt-5>\n    <v-flex xs12>\n        <v-card>\n            <v-card-text>\n                <v-data-table :headers=\"headers\"  show-select v-model=\"selected_rows\"    :search=\"search\" :items=\"rows\" class=\"elevation-0\"\n                    item-key=\"city_id\">\n                    <template v-slot:[`item.city_id`]=\"{ item }\">\n                        <div>\n                            <v-btn icon :to=\"'/cities-list/'+item.city_id\"  color=\"teal\" class=\"mx-1\">\n                            <v-icon> mdi-pencil-outline </v-icon>\n                            </v-btn>\n                            <v-btn color=\"error\" icon class=\"mx-1\" @click=\"selectCities(item)\" >\n                                <v-icon> mdi-delete-outline </v-icon>\n                            </v-btn>\n                        </div>\n                    </template>\n                </v-data-table>\n            </v-card-text>\n            \n            <v-card-actions v-if=\"selected_rows.length > 0\">\n                <v-btn color=\"error\" @click=\"deleteCitiesList\">{{$store.getters.language.data.cities.delete_list_btn}}</v-btn>\n            </v-card-actions>\n                \n        </v-card>\n    </v-flex>\n</v-layout>\n</v-container>\n<v-dialog v-model=\"delete_dialog\" persistent max-width=\"400\">\n    <v-card>\n        <v-card-title>\n            {{$store.getters.language.data.cities.delete_question}}\n        </v-card-title>\n        <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn text class=\"elevation-0\" @click=\"delete_dialog = false\">\n                {{$store.getters.language.data.cities.cancel_btn}}\n            </v-btn>\n            <v-btn color=\"error\" class=\"elevation-0\" @click=\"deleteCities(selected_cities.city_id)\">\n                {{$store.getters.language.data.cities.yes_btn}}\n            </v-btn>\n        </v-card-actions>\n    </v-card>\n</v-dialog>\n<v-snackbar v-model=\"snackbar.value\" :color=\"snackbar.color\">\n    {{snackbar.text}}\n</v-snackbar>\n</div>\n</template>\n<script>\n    import requests from './../../requests/cities.request.js'\n    export default {\n        data() {\n            return {\n                cities: {},\n                search: '',\n                loading : true,\n                loading_btn:false,\n                selected_rows : [],\n                snackbar: {\n                    value: false,\n                    text: '',\n                    color: ''\n                },\n                rows:[],\n                selected_cities : {},\n                delete_dialog: false,\n                headers: [\n\n                    \n                        { \n                            text: this.$store.getters.language.data.cities.city_name,\n                            align: 'start',\n                            sortable: true,\n                            value: 'city_name',\n                        },   {\n            text: this.$store.getters.language.data.actions,\n            align: 'start',\n            sortable: true,\n            value: 'city_id',\n        }\n                ],\n            }\n        },\n        computed: {\n            \n            \n        },\n        mounted(){\n            this.readCities();\n        },\n        methods: {\n            addCities() {\n                this.loading_btn = true\n                requests.createCities(this.cities).then(r => {\n                    if (r.status == 200) {\n                        this.cities = {}\n                        this.rows.push(\n                            r.data.new_data\n                        )\n                        this.snackbar = {\n                            value: true,\n                            text: 'Cities Added',\n                            color: 'success'\n                        }\n                    } else {\n                        this.snackbar = {\n                            value: true,\n                            text: 'Fail to add Cities',\n                            color: 'error'\n                        }\n                    }\n                })\n                .finally(() => {\n                    this.loading_btn = false\n                })\n\n            },\n            deleteCities(city_id) {\n                requests.deleteCities(city_id).then(r => {\n                    this.delete_dialog = false\n                    if (r.status == 200) {\n                        this.rows = this.rows.filter(f =>{\n                            return f.city_id != city_id\n                        })\n                        this.snackbar = {\n                            value: true,\n                            text: 'Cities Deleted',\n                            color: 'success'\n                        }\n                    } else {\n                        this.snackbar = {\n                            value: true,\n                            text: 'Delete Faild',\n                            color: 'error'\n                        }\n                    }\n                })\n            },\n            \n            deleteCitiesList() {\n                let ids = this.selected_rows.map(m => m.city_id)\n                requests.deleteCitiesList(ids).then(r => {\n                    if (r.status == 200) {\n                        this.rows = this.rows.filter(f =>{  \n                            return ids.indexOf(f.city_id) == -1\n                        })\n                        this.snackbar = {\n                            value: true,\n                            text: this.selected_rows.length+' Cities Deleted',\n                            color: 'success'\n                        }\n                    } else {\n                        this.snackbar = {\n                            value: true,\n                            text: 'Delete Faild',\n                            color: 'error'\n                        }\n                    }\n                })\n            },\n            \n            readCities() {\n                this.loading = true\n                requests.getAllCities().then(r => {\n                    if (r.status == 200) {\n                        this.rows = r.data.rows\n                        this.loading = false\n                    } else {\n                        this.snackbar = {\n                            value: true,\n                            text: 'Fail to read Cities',\n                            color: 'error'\n                        }\n                    }\n                })\n                .catch(e => {\n                    this.snackbar = {\n                        value: true,\n                        text: 'Fail to read Cities',\n                        color: 'error'\n                    }\n                })\n                .finally(() => {\n                    this.loading = false\n                })\n            },\n            selectCities(i) {\n                this.selected_cities = i\n                this.delete_dialog = true\n            },\n        },\n    }\n</script>\n                    ","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./List.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./List.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./List.vue?vue&type=template&id=164e73c4&\"\nimport script from \"./List.vue?vue&type=script&lang=js&\"\nexport * from \"./List.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\nimport axios from 'axios';\nexport default {\n    \n        async createCities(params)  {\n            return await axios.post(`cities/create` , params)\n        },\n        async createCitiesList(params)  {\n            return await axios.post(`cities/create/list` , params)\n        },\n        async updateCitiesColumn(column , value , data)  {\n            return await axios.put(`cities/update_list?${column}=${value}` , data)\n        },\n        async deleteCitiesList(list)  {\n            return await axios.delete(`cities/delete_list` , {\n                data: {\n                    list:list\n                }\n            })\n        },\n        async reportCities(column , value)  {\n            return await axios.get(`cities/report?${column}=${value}`)\n        },\n        async getAllCities()  {\n            return await axios.get(`cities/all`)\n        },\n        async getOneCities(city_id)  {\n            return await axios.get(`cities/all/${city_id}`)\n        },\n        async getCitiesByColumn(column , value)  {\n            return await axios.get(`cities/filter?column=${column}&value=${value}`)\n        },\n        async deleteCities(city_id)  {\n            return await axios.delete(`cities/delete/${city_id}`)\n        },\n        async updateCities(city_id , params)  {\n            return await axios.put(`cities/update/${city_id}` , params)\n        },\n}\n        "],"sourceRoot":""}